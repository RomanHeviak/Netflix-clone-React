{"ast":null,"code":"var _jsxFileName = \"/Users/romanheviak/Desktop/react EPAM/react-netflix/src/Components/Genres.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Context } from \"../context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Genres = () => {\n  _s();\n\n  let history = useHistory();\n  const {\n    selectedSort,\n    movies,\n    setFilm,\n    listToShow\n  } = useContext(Context);\n  let isLargeRow = false;\n\n  function filmItem(id) {\n    let item = movies.filter(film => film.id == id.target.id);\n    setFilm(item);\n    history.push(`/filmprofile/${item.map(i => i.id)}`);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: selectedSort\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rowPosters\",\n      children: listToShow.filter(i => i.genres.includes(selectedSort)).map(movie => {\n        var _movie$image, _movie$image2;\n\n        return !isLargeRow && (movie === null || movie === void 0 ? void 0 : (_movie$image = movie.image) === null || _movie$image === void 0 ? void 0 : _movie$image.original) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rowItem\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            id: movie.id,\n            onClick: filmItem,\n            className: `rowPoster ${isLargeRow && \"rowPosterLarge\"}`,\n            src: `${isLargeRow ? null : movie === null || movie === void 0 ? void 0 : (_movie$image2 = movie.image) === null || _movie$image2 === void 0 ? void 0 : _movie$image2.original}`,\n            alt: movie.name\n          }, movie.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: movie.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Genres, \"e6PbMxaCYjM2Cu+3L2is6MHLUZQ=\", false, function () {\n  return [useHistory];\n});\n\n_c = Genres;\nexport default Genres;\n\nvar _c;\n\n$RefreshReg$(_c, \"Genres\");","map":{"version":3,"sources":["/Users/romanheviak/Desktop/react EPAM/react-netflix/src/Components/Genres.js"],"names":["React","useContext","useHistory","Context","Genres","history","selectedSort","movies","setFilm","listToShow","isLargeRow","filmItem","id","item","filter","film","target","push","map","i","genres","includes","movie","image","original","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,YAAxB;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,MAAIC,OAAO,GAAGH,UAAU,EAAxB;AACA,QAAM;AAAEI,IAAAA,YAAF;AAAgBC,IAAAA,MAAhB;AAAwBC,IAAAA,OAAxB;AAAiCC,IAAAA;AAAjC,MAA+CR,UAAU,CAACE,OAAD,CAA/D;AACA,MAAIO,UAAU,GAAG,KAAjB;;AAEA,WAASC,QAAT,CAAkBC,EAAlB,EAAsB;AACpB,QAAIC,IAAI,GAAGN,MAAM,CAACO,MAAP,CAAeC,IAAD,IAAUA,IAAI,CAACH,EAAL,IAAWA,EAAE,CAACI,MAAH,CAAUJ,EAA7C,CAAX;AACAJ,IAAAA,OAAO,CAACK,IAAD,CAAP;AACAR,IAAAA,OAAO,CAACY,IAAR,CAAc,gBAAeJ,IAAI,CAACK,GAAL,CAAUC,CAAD,IAAOA,CAAC,CAACP,EAAlB,CAAsB,EAAnD;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAKN;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,gBACGG,UAAU,CACRK,MADF,CACUK,CAAD,IAAOA,CAAC,CAACC,MAAF,CAASC,QAAT,CAAkBf,YAAlB,CADhB,EAEEY,GAFF,CAGII,KAAD;AAAA;;AAAA,eACE,CAACZ,UAAD,KACAY,KADA,aACAA,KADA,uCACAA,KAAK,CAAEC,KADP,iDACA,aAAcC,QADd,kBAEE;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,kCACE;AACE,YAAA,EAAE,EAAEF,KAAK,CAACV,EADZ;AAEE,YAAA,OAAO,EAAED,QAFX;AAGE,YAAA,SAAS,EAAG,aAAYD,UAAU,IAAI,gBAAiB,EAHzD;AAKE,YAAA,GAAG,EAAG,GAAEA,UAAU,GAAG,IAAH,GAAUY,KAAV,aAAUA,KAAV,wCAAUA,KAAK,CAAEC,KAAjB,kDAAU,cAAcC,QAAS,EALrD;AAME,YAAA,GAAG,EAAEF,KAAK,CAACG;AANb,aAIOH,KAAK,CAACV,EAJb;AAAA;AAAA;AAAA;AAAA,kBADF,eASE;AAAA,sBAAIU,KAAK,CAACG;AAAV;AAAA;AAAA;AAAA;AAAA,kBATF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA,OAHH;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CArCD;;GAAMrB,M;UACUF,U;;;KADVE,M;AAuCN,eAAeA,MAAf","sourcesContent":["import React, { useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Context } from \"../context\";\n\nconst Genres = () => {\n  let history = useHistory();\n  const { selectedSort, movies, setFilm ,listToShow} = useContext(Context);\n  let isLargeRow = false;\n\n  function filmItem(id) {\n    let item = movies.filter((film) => film.id == id.target.id);\n    setFilm(item);\n    history.push(`/filmprofile/${item.map((i) => i.id)}`);\n  }\n\n  return (\n    <div className=\"row\">\n      <h2>{selectedSort}</h2>\n      <div className=\"rowPosters\">\n        {listToShow\n          .filter((i) => i.genres.includes(selectedSort))\n          .map(\n            (movie) =>\n              !isLargeRow &&\n              movie?.image?.original && (\n                <div className=\"rowItem\">\n                  <img\n                    id={movie.id}\n                    onClick={filmItem}\n                    className={`rowPoster ${isLargeRow && \"rowPosterLarge\"}`}\n                    key={movie.id}\n                    src={`${isLargeRow ? null : movie?.image?.original}`}\n                    alt={movie.name}\n                  />\n                  <p>{movie.name}</p>\n                </div>\n              )\n          )}\n      </div>\n    </div>\n  );\n};\n\nexport default Genres;\n"]},"metadata":{},"sourceType":"module"}